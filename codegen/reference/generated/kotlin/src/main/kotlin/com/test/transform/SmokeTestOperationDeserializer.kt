// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.sdk.kotlin.runtime.UnknownServiceErrorException
import aws.sdk.kotlin.runtime.http.setAseErrorMetadata
import aws.sdk.kotlin.runtime.http.withPayload
import aws.sdk.kotlin.runtime.protocol.json.RestJsonErrorDeserializer
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.isSuccess
import aws.smithy.kotlin.runtime.http.operation.HttpDeserialize
import aws.smithy.kotlin.runtime.http.readAll
import aws.smithy.kotlin.runtime.http.response.HttpResponse
import aws.smithy.kotlin.runtime.http.util.splitHttpDateHeaderListValues
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.time.Instant
import com.test.model.ExampleException
import com.test.model.SmokeTestResponse


internal class SmokeTestOperationDeserializer: HttpDeserialize<SmokeTestResponse> {

    override suspend fun deserialize(context: ExecutionContext, response: HttpResponse): SmokeTestResponse {
        if (!response.status.isSuccess()) {
            throwSmokeTestError(context, response)
        }
        val builder = SmokeTestResponse.Builder()

        builder.intHeader = response.headers["X-Header2"]?.toInt()
        builder.strHeader = response.headers["X-Header1"]
        builder.tsListHeader = response.headers.getAll("X-Header3")?.flatMap(::splitHttpDateHeaderListValues)?.map { Instant.fromRfc5322(it) }

        val payload = response.body.readAll()
        if (payload != null) {
            deserializeSmokeTestOperationBody(builder, payload)
        }
        return builder.build()
    }
}

private fun deserializeSmokeTestOperationBody(builder: SmokeTestResponse.Builder, payload: ByteArray) {
    val deserializer = JsonDeserializer(payload)
    val PAYLOAD1_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("payload1"))
    val PAYLOAD2_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, JsonSerialName("payload2"))
    val PAYLOAD3_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("payload3"))
    val PAYLOAD4_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("payload4"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(PAYLOAD1_DESCRIPTOR)
        field(PAYLOAD2_DESCRIPTOR)
        field(PAYLOAD3_DESCRIPTOR)
        field(PAYLOAD4_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                PAYLOAD1_DESCRIPTOR.index -> builder.payload1 = deserializeString()
                PAYLOAD2_DESCRIPTOR.index -> builder.payload2 = deserializeInt()
                PAYLOAD3_DESCRIPTOR.index -> builder.payload3 = deserializeNestedDocument(deserializer)
                PAYLOAD4_DESCRIPTOR.index -> builder.payload4 = deserializeString().let { Instant.fromIso8601(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
}

private suspend fun throwSmokeTestError(context: ExecutionContext, response: HttpResponse): kotlin.Nothing {
    val payload = response.body.readAll()
    val wrappedResponse = response.withPayload(payload)

    val errorDetails = try {
        RestJsonErrorDeserializer.deserialize(response.headers, payload)
    } catch (ex: Exception) {
        throw UnknownServiceErrorException("failed to parse response as restJson1 error", ex).also {
            setAseErrorMetadata(it, wrappedResponse, null)
        }
    }

    val modeledExceptionDeserializer = when(errorDetails.code) {
        "SmokeTestError" -> SmokeTestErrorDeserializer()
        else -> throw ExampleException(errorDetails.message)
    }

    val modeledException = modeledExceptionDeserializer.deserialize(context, wrappedResponse)
    setAseErrorMetadata(modeledException, wrappedResponse, errorDetails)
    throw modeledException
}
