// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import com.test.model.Nested4


internal fun serializeNested4Document(serializer: Serializer, input: Nested4) {
    val INTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("intList"))
    val INTMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("intMap"))
    val MEMBER1_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, JsonSerialName("member1"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(INTLIST_DESCRIPTOR)
        field(INTMAP_DESCRIPTOR)
        field(MEMBER1_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.member1?.let { field(MEMBER1_DESCRIPTOR, it) }
        if (input.intList != null) {
            listField(INTLIST_DESCRIPTOR) {
                for (el0 in input.intList) {
                    serializeInt(el0)
                }
            }
        }
        if (input.intMap != null) {
            mapField(INTMAP_DESCRIPTOR) {
                input.intMap.forEach { (key, value) -> entry(key, value) }
            }
        }
    }
}
