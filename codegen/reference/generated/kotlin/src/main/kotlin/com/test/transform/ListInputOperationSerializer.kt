// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.json.JsonSerializer
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.util.encodeBase64String
import com.test.model.ListInputRequest


internal class ListInputOperationSerializer: HttpSerialize<ListInputRequest> {
    override suspend fun serialize(context: ExecutionContext, input: ListInputRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            path = "/input/list"
        }

        val payload = serializeListInputOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        builder.headers.setMissing("Content-Type", "application/json")
        return builder
    }
}

private fun serializeListInputOperationBody(context: ExecutionContext, input: ListInputRequest): ByteArray {
    val serializer = JsonSerializer()
    val BLOBLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("blobList"))
    val ENUMLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("enumList"))
    val INTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("intList"))
    val NESTEDINTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("nestedIntList"))
    val NESTEDINTLIST_C0_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List)
    val NESTEDMAPLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("nestedMapList"))
    val NESTEDMAPLIST_C0_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map)
    val STRUCTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("structList"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(BLOBLIST_DESCRIPTOR)
        field(ENUMLIST_DESCRIPTOR)
        field(INTLIST_DESCRIPTOR)
        field(NESTEDINTLIST_DESCRIPTOR)
        field(NESTEDMAPLIST_DESCRIPTOR)
        field(STRUCTLIST_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        if (input.blobList != null) {
            listField(BLOBLIST_DESCRIPTOR) {
                for (el0 in input.blobList) {
                    serializeString(el0.encodeBase64String())
                }
            }
        }
        if (input.enumList != null) {
            listField(ENUMLIST_DESCRIPTOR) {
                for (el0 in input.enumList) {
                    serializeString(el0.value)
                }
            }
        }
        if (input.intList != null) {
            listField(INTLIST_DESCRIPTOR) {
                for (el0 in input.intList) {
                    serializeInt(el0)
                }
            }
        }
        if (input.nestedIntList != null) {
            listField(NESTEDINTLIST_DESCRIPTOR) {
                for (el0 in input.nestedIntList) {
                    serializer.serializeList(NESTEDINTLIST_C0_DESCRIPTOR) {
                        for (el1 in el0) {
                            serializeInt(el1)
                        }
                    }
                }
            }
        }
        if (input.nestedMapList != null) {
            listField(NESTEDMAPLIST_DESCRIPTOR) {
                for (el0 in input.nestedMapList) {
                    serializer.serializeMap(NESTEDMAPLIST_C0_DESCRIPTOR) {
                        el0.forEach { (key1, value1) -> entry(key1, value1) }
                    }
                }
            }
        }
        if (input.structList != null) {
            listField(STRUCTLIST_DESCRIPTOR) {
                for (el0 in input.structList) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeNestedDocument))
                }
            }
        }
    }
    return serializer.toByteArray()
}
