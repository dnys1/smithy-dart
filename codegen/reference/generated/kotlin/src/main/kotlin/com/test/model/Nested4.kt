// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.model



class Nested4 private constructor(builder: Builder) {
    val intList: List<Int>? = builder.intList
    val intMap: Map<String, Int>? = builder.intMap
    val member1: kotlin.Int? = builder.member1

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): com.test.model.Nested4 = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("Nested4(")
        append("intList=$intList,")
        append("intMap=$intMap,")
        append("member1=$member1)")
    }

    override fun hashCode(): kotlin.Int {
        var result = intList?.hashCode() ?: 0
        result = 31 * result + (intMap?.hashCode() ?: 0)
        result = 31 * result + (member1 ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as Nested4

        if (intList != other.intList) return false
        if (intMap != other.intMap) return false
        if (member1 != other.member1) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): com.test.model.Nested4 = Builder(this).apply(block).build()

    class Builder {
        var intList: List<Int>? = null
        var intMap: Map<String, Int>? = null
        var member1: kotlin.Int? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: com.test.model.Nested4) : this() {
            this.intList = x.intList
            this.intMap = x.intMap
            this.member1 = x.member1
        }

        @PublishedApi
        internal fun build(): com.test.model.Nested4 = Nested4(this)
    }
}
