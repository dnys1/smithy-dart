// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.json.JsonSerializer
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.util.encodeBase64String
import com.test.model.MapInputRequest


internal class MapInputOperationSerializer: HttpSerialize<MapInputRequest> {
    override suspend fun serialize(context: ExecutionContext, input: MapInputRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            path = "/input/map"
        }

        val payload = serializeMapInputOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        builder.headers.setMissing("Content-Type", "application/json")
        return builder
    }
}

private fun serializeMapInputOperationBody(context: ExecutionContext, input: MapInputRequest): ByteArray {
    val serializer = JsonSerializer()
    val BLOBMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("blobMap"))
    val ENUMMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("enumMap"))
    val INTMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("intMap"))
    val MAPOFLISTS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("mapOfLists"))
    val MAPOFLISTS_C0_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List)
    val NESTEDMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("nestedMap"))
    val NESTEDMAP_C0_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map)
    val STRUCTMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("structMap"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(BLOBMAP_DESCRIPTOR)
        field(ENUMMAP_DESCRIPTOR)
        field(INTMAP_DESCRIPTOR)
        field(MAPOFLISTS_DESCRIPTOR)
        field(NESTEDMAP_DESCRIPTOR)
        field(STRUCTMAP_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        if (input.blobMap != null) {
            mapField(BLOBMAP_DESCRIPTOR) {
                input.blobMap.forEach { (key, value) -> entry(key, value.encodeBase64String()) }
            }
        }
        if (input.enumMap != null) {
            mapField(ENUMMAP_DESCRIPTOR) {
                input.enumMap.forEach { (key, value) -> entry(key, value.value) }
            }
        }
        if (input.intMap != null) {
            mapField(INTMAP_DESCRIPTOR) {
                input.intMap.forEach { (key, value) -> entry(key, value) }
            }
        }
        if (input.mapOfLists != null) {
            mapField(MAPOFLISTS_DESCRIPTOR) {
                input.mapOfLists.forEach { (key, value) ->
                    listEntry(key, MAPOFLISTS_C0_DESCRIPTOR) {
                        for (el1 in value) {
                            serializeInt(el1)
                        }
                    }
                }
            }
        }
        if (input.nestedMap != null) {
            mapField(NESTEDMAP_DESCRIPTOR) {
                input.nestedMap.forEach { (key, value) ->
                    mapEntry(key, NESTEDMAP_C0_DESCRIPTOR) {
                        value.forEach { (key1, value1) -> entry(key1, value1) }
                    }
                }
            }
        }
        if (input.structMap != null) {
            mapField(STRUCTMAP_DESCRIPTOR) {
                input.structMap.forEach { (key, value) -> entry(key, asSdkSerializable(value, ::serializeReachableOnlyThroughMapDocument)) }
            }
        }
    }
    return serializer.toByteArray()
}
