// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import com.test.model.Nested


internal fun serializeNestedDocument(serializer: Serializer, input: Nested) {
    val MEMBER1_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("member1"))
    val MEMBER2_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("member2"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(MEMBER1_DESCRIPTOR)
        field(MEMBER2_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.member1?.let { field(MEMBER1_DESCRIPTOR, it) }
        input.member2?.let { field(MEMBER2_DESCRIPTOR, it) }
    }
}
