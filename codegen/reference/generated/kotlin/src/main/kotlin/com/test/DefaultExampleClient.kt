// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test

import aws.sdk.kotlin.runtime.client.AwsClientOption
import aws.sdk.kotlin.runtime.execution.AuthAttributes
import aws.sdk.kotlin.runtime.http.ApiMetadata
import aws.sdk.kotlin.runtime.http.AwsUserAgentMetadata
import aws.sdk.kotlin.runtime.http.engine.crt.CrtHttpEngine
import aws.sdk.kotlin.runtime.http.middleware.ResolveAwsEndpoint
import aws.sdk.kotlin.runtime.http.middleware.UserAgent
import aws.sdk.kotlin.runtime.http.retries.AwsDefaultRetryPolicy
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.client.SdkClientOption
import aws.smithy.kotlin.runtime.http.SdkHttpClient
import aws.smithy.kotlin.runtime.http.middleware.Retry
import aws.smithy.kotlin.runtime.http.operation.SdkHttpOperation
import aws.smithy.kotlin.runtime.http.operation.context
import aws.smithy.kotlin.runtime.http.operation.execute
import aws.smithy.kotlin.runtime.http.operation.roundTrip
import aws.smithy.kotlin.runtime.http.sdkHttpClient
import aws.smithy.kotlin.runtime.util.putIfAbsent
import com.test.model.*
import com.test.transform.*


const val ServiceId: String = "Example"
const val ServiceApiVersion: String = "1.0.0"
const val SdkVersion: String = "0.0.1"

internal class DefaultExampleClient(override val config: ExampleClient.Config) : ExampleClient {
    private val client: SdkHttpClient
    init {
        val httpClientEngine = config.httpClientEngine ?: CrtHttpEngine()
        client = sdkHttpClient(httpClientEngine, manageEngine = config.httpClientEngine == null)
    }
    private val awsUserAgentMetadata = AwsUserAgentMetadata.fromEnvironment(ApiMetadata(ServiceId, SdkVersion))

    override suspend fun blobInput(input: BlobInputRequest): BlobInputResponse {
        val op = SdkHttpOperation.build<BlobInputRequest, BlobInputResponse> {
            serializer = BlobInputOperationSerializer()
            deserializer = BlobInputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "BlobInput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun constantQueryString(input: ConstantQueryStringRequest): ConstantQueryStringResponse {
        val op = SdkHttpOperation.build<ConstantQueryStringRequest, ConstantQueryStringResponse> {
            serializer = ConstantQueryStringOperationSerializer()
            deserializer = ConstantQueryStringOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "ConstantQueryString"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun duplicateInputTest(input: DuplicateInputTestRequest): DuplicateInputTestResponse {
        val op = SdkHttpOperation.build<DuplicateInputTestRequest, DuplicateInputTestResponse> {
            serializer = DuplicateInputTestOperationSerializer()
            deserializer = DuplicateInputTestOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "DuplicateInputTest"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun enumInput(input: EnumInputRequest): EnumInputResponse {
        val op = SdkHttpOperation.build<EnumInputRequest, EnumInputResponse> {
            serializer = EnumInputOperationSerializer()
            deserializer = EnumInputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "EnumInput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun explicitBlob(input: ExplicitBlobRequest): ExplicitBlobResponse {
        val op = SdkHttpOperation.build<ExplicitBlobRequest, ExplicitBlobResponse> {
            serializer = ExplicitBlobOperationSerializer()
            deserializer = ExplicitBlobOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "ExplicitBlob"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun <T> explicitBlobStream(input: ExplicitBlobStreamRequest, block: suspend (ExplicitBlobStreamResponse) -> T): T {
        val op = SdkHttpOperation.build<ExplicitBlobStreamRequest, ExplicitBlobStreamResponse> {
            serializer = ExplicitBlobStreamOperationSerializer()
            deserializer = ExplicitBlobStreamOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "ExplicitBlobStream"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.execute(client, input, block)
    }

    override suspend fun explicitString(input: ExplicitStringRequest): ExplicitStringResponse {
        val op = SdkHttpOperation.build<ExplicitStringRequest, ExplicitStringResponse> {
            serializer = ExplicitStringOperationSerializer()
            deserializer = ExplicitStringOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "ExplicitString"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun explicitStruct(input: ExplicitStructRequest): ExplicitStructResponse {
        val op = SdkHttpOperation.build<ExplicitStructRequest, ExplicitStructResponse> {
            serializer = ExplicitStructOperationSerializer()
            deserializer = ExplicitStructOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "ExplicitStruct"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun listInput(input: ListInputRequest): ListInputResponse {
        val op = SdkHttpOperation.build<ListInputRequest, ListInputResponse> {
            serializer = ListInputOperationSerializer()
            deserializer = ListInputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "ListInput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun mapInput(input: MapInputRequest): MapInputResponse {
        val op = SdkHttpOperation.build<MapInputRequest, MapInputResponse> {
            serializer = MapInputOperationSerializer()
            deserializer = MapInputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "MapInput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun prefixHeaders(input: PrefixHeadersRequest): PrefixHeadersResponse {
        val op = SdkHttpOperation.build<PrefixHeadersRequest, PrefixHeadersResponse> {
            serializer = PrefixHeadersOperationSerializer()
            deserializer = PrefixHeadersOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "PrefixHeaders"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun smokeTest(input: SmokeTestRequest): SmokeTestResponse {
        val op = SdkHttpOperation.build<SmokeTestRequest, SmokeTestResponse> {
            serializer = SmokeTestOperationSerializer()
            deserializer = SmokeTestOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "SmokeTest"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun timestampInput(input: TimestampInputRequest): TimestampInputResponse {
        val op = SdkHttpOperation.build<TimestampInputRequest, TimestampInputResponse> {
            serializer = TimestampInputOperationSerializer()
            deserializer = TimestampInputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "TimestampInput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun unionAggregateInput(input: UnionAggregateInputRequest): UnionAggregateInputResponse {
        val op = SdkHttpOperation.build<UnionAggregateInputRequest, UnionAggregateInputResponse> {
            serializer = UnionAggregateInputOperationSerializer()
            deserializer = UnionAggregateInputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "UnionAggregateInput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun unionAggregateOutput(input: UnionAggregateOutputRequest): UnionAggregateOutputResponse {
        val op = SdkHttpOperation.build<UnionAggregateOutputRequest, UnionAggregateOutputResponse> {
            serializer = UnionAggregateOutputOperationSerializer()
            deserializer = UnionAggregateOutputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "UnionAggregateOutput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun unionInput(input: UnionInputRequest): UnionInputResponse {
        val op = SdkHttpOperation.build<UnionInputRequest, UnionInputResponse> {
            serializer = UnionInputOperationSerializer()
            deserializer = UnionInputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "UnionInput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override suspend fun unionOutput(input: UnionOutputRequest): UnionOutputResponse {
        val op = SdkHttpOperation.build<UnionOutputRequest, UnionOutputResponse> {
            serializer = UnionOutputOperationSerializer()
            deserializer = UnionOutputOperationDeserializer()
            context {
                expectedHttpStatus = 200
                service = serviceName
                operationName = "UnionOutput"
            }
        }
        mergeServiceDefaults(op.context)
        op.install(ResolveAwsEndpoint(ServiceId, config.endpointResolver))
        op.install(Retry(config.retryStrategy, AwsDefaultRetryPolicy))
        op.install(UserAgent(awsUserAgentMetadata))
        return op.roundTrip(client, input)
    }

    override fun close() {
        client.close()
    }

    /**
     * merge the defaults configured for the service into the execution context before firing off a request
     */
    private suspend fun mergeServiceDefaults(ctx: ExecutionContext) {
        ctx.putIfAbsent(AwsClientOption.Region, config.region)
        ctx.putIfAbsent(AuthAttributes.SigningRegion, config.region)
        ctx.putIfAbsent(SdkClientOption.ServiceName, serviceName)
        ctx.putIfAbsent(SdkClientOption.LogMode, config.sdkLogMode)
    }
}
