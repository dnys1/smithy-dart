// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.model



class DuplicateInputTestRequest private constructor(builder: Builder) {
    val header1: kotlin.String? = builder.header1
    val header2: kotlin.String? = builder.header2
    val label1: kotlin.String? = builder.label1
    val payload1: kotlin.String? = builder.payload1
    val payload2: kotlin.Int? = builder.payload2
    val payload3: com.test.model.Nested? = builder.payload3
    val query1: kotlin.String? = builder.query1

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): com.test.model.DuplicateInputTestRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("DuplicateInputTestRequest(")
        append("header1=$header1,")
        append("header2=$header2,")
        append("label1=$label1,")
        append("payload1=$payload1,")
        append("payload2=$payload2,")
        append("payload3=$payload3,")
        append("query1=$query1)")
    }

    override fun hashCode(): kotlin.Int {
        var result = header1?.hashCode() ?: 0
        result = 31 * result + (header2?.hashCode() ?: 0)
        result = 31 * result + (label1?.hashCode() ?: 0)
        result = 31 * result + (payload1?.hashCode() ?: 0)
        result = 31 * result + (payload2 ?: 0)
        result = 31 * result + (payload3?.hashCode() ?: 0)
        result = 31 * result + (query1?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as DuplicateInputTestRequest

        if (header1 != other.header1) return false
        if (header2 != other.header2) return false
        if (label1 != other.label1) return false
        if (payload1 != other.payload1) return false
        if (payload2 != other.payload2) return false
        if (payload3 != other.payload3) return false
        if (query1 != other.query1) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): com.test.model.DuplicateInputTestRequest = Builder(this).apply(block).build()

    class Builder {
        var header1: kotlin.String? = null
        var header2: kotlin.String? = null
        var label1: kotlin.String? = null
        var payload1: kotlin.String? = null
        var payload2: kotlin.Int? = null
        var payload3: com.test.model.Nested? = null
        var query1: kotlin.String? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: com.test.model.DuplicateInputTestRequest) : this() {
            this.header1 = x.header1
            this.header2 = x.header2
            this.label1 = x.label1
            this.payload1 = x.payload1
            this.payload2 = x.payload2
            this.payload3 = x.payload3
            this.query1 = x.query1
        }

        @PublishedApi
        internal fun build(): com.test.model.DuplicateInputTestRequest = DuplicateInputTestRequest(this)

        /**
         * construct an [com.test.model.Nested] inside the given [block]
         */
        fun payload3(block: com.test.model.Nested.Builder.() -> kotlin.Unit) {
            this.payload3 = com.test.model.Nested.invoke(block)
        }
    }
}
