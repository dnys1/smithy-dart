// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import com.test.model.MyUnion


internal fun serializeMyUnionDocument(serializer: Serializer, input: MyUnion) {
    val I32_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, JsonSerialName("i32"))
    val STRINGA_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("stringA"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(I32_DESCRIPTOR)
        field(STRINGA_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        when (input) {
            is MyUnion.I32 -> field(I32_DESCRIPTOR, input.value)
            is MyUnion.Stringa -> field(STRINGA_DESCRIPTOR, input.value)
        }
    }
}
