// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.model

import aws.smithy.kotlin.runtime.time.Instant

class TimestampInputRequest private constructor(builder: Builder) {
    val dateTime: aws.smithy.kotlin.runtime.time.Instant? = builder.dateTime
    val epochSeconds: aws.smithy.kotlin.runtime.time.Instant? = builder.epochSeconds
    val headerEpoch: aws.smithy.kotlin.runtime.time.Instant? = builder.headerEpoch
    val headerHttpDate: aws.smithy.kotlin.runtime.time.Instant? = builder.headerHttpDate
    val httpDate: aws.smithy.kotlin.runtime.time.Instant? = builder.httpDate
    val normal: aws.smithy.kotlin.runtime.time.Instant? = builder.normal
    val queryTimestamp: aws.smithy.kotlin.runtime.time.Instant? = builder.queryTimestamp
    val queryTimestampList: List<Instant>? = builder.queryTimestampList
    val timestampList: List<Instant>? = builder.timestampList
    val tsLabel: aws.smithy.kotlin.runtime.time.Instant? = builder.tsLabel

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): com.test.model.TimestampInputRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("TimestampInputRequest(")
        append("dateTime=$dateTime,")
        append("epochSeconds=$epochSeconds,")
        append("headerEpoch=$headerEpoch,")
        append("headerHttpDate=$headerHttpDate,")
        append("httpDate=$httpDate,")
        append("normal=$normal,")
        append("queryTimestamp=$queryTimestamp,")
        append("queryTimestampList=$queryTimestampList,")
        append("timestampList=$timestampList,")
        append("tsLabel=$tsLabel)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dateTime?.hashCode() ?: 0
        result = 31 * result + (epochSeconds?.hashCode() ?: 0)
        result = 31 * result + (headerEpoch?.hashCode() ?: 0)
        result = 31 * result + (headerHttpDate?.hashCode() ?: 0)
        result = 31 * result + (httpDate?.hashCode() ?: 0)
        result = 31 * result + (normal?.hashCode() ?: 0)
        result = 31 * result + (queryTimestamp?.hashCode() ?: 0)
        result = 31 * result + (queryTimestampList?.hashCode() ?: 0)
        result = 31 * result + (timestampList?.hashCode() ?: 0)
        result = 31 * result + (tsLabel?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as TimestampInputRequest

        if (dateTime != other.dateTime) return false
        if (epochSeconds != other.epochSeconds) return false
        if (headerEpoch != other.headerEpoch) return false
        if (headerHttpDate != other.headerHttpDate) return false
        if (httpDate != other.httpDate) return false
        if (normal != other.normal) return false
        if (queryTimestamp != other.queryTimestamp) return false
        if (queryTimestampList != other.queryTimestampList) return false
        if (timestampList != other.timestampList) return false
        if (tsLabel != other.tsLabel) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): com.test.model.TimestampInputRequest = Builder(this).apply(block).build()

    class Builder {
        var dateTime: aws.smithy.kotlin.runtime.time.Instant? = null
        var epochSeconds: aws.smithy.kotlin.runtime.time.Instant? = null
        var headerEpoch: aws.smithy.kotlin.runtime.time.Instant? = null
        var headerHttpDate: aws.smithy.kotlin.runtime.time.Instant? = null
        var httpDate: aws.smithy.kotlin.runtime.time.Instant? = null
        var normal: aws.smithy.kotlin.runtime.time.Instant? = null
        var queryTimestamp: aws.smithy.kotlin.runtime.time.Instant? = null
        var queryTimestampList: List<Instant>? = null
        var timestampList: List<Instant>? = null
        var tsLabel: aws.smithy.kotlin.runtime.time.Instant? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: com.test.model.TimestampInputRequest) : this() {
            this.dateTime = x.dateTime
            this.epochSeconds = x.epochSeconds
            this.headerEpoch = x.headerEpoch
            this.headerHttpDate = x.headerHttpDate
            this.httpDate = x.httpDate
            this.normal = x.normal
            this.queryTimestamp = x.queryTimestamp
            this.queryTimestampList = x.queryTimestampList
            this.timestampList = x.timestampList
            this.tsLabel = x.tsLabel
        }

        @PublishedApi
        internal fun build(): com.test.model.TimestampInputRequest = TimestampInputRequest(this)
    }
}
