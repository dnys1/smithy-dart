// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.sdk.kotlin.runtime.UnknownServiceErrorException
import aws.sdk.kotlin.runtime.http.setAseErrorMetadata
import aws.sdk.kotlin.runtime.http.withPayload
import aws.sdk.kotlin.runtime.protocol.json.RestJsonErrorDeserializer
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.isSuccess
import aws.smithy.kotlin.runtime.http.operation.HttpDeserialize
import aws.smithy.kotlin.runtime.http.readAll
import aws.smithy.kotlin.runtime.http.response.HttpResponse
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.util.decodeBase64Bytes
import com.test.model.ExampleException
import com.test.model.MapInputResponse
import com.test.model.MyEnum
import com.test.model.ReachableOnlyThroughMap


internal class MapInputOperationDeserializer: HttpDeserialize<MapInputResponse> {

    override suspend fun deserialize(context: ExecutionContext, response: HttpResponse): MapInputResponse {
        if (!response.status.isSuccess()) {
            throwMapInputError(context, response)
        }
        val builder = MapInputResponse.Builder()

        val payload = response.body.readAll()
        if (payload != null) {
            deserializeMapInputOperationBody(builder, payload)
        }
        return builder.build()
    }
}

private fun deserializeMapInputOperationBody(builder: MapInputResponse.Builder, payload: ByteArray) {
    val deserializer = JsonDeserializer(payload)
    val BLOBMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("blobMap"))
    val ENUMMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("enumMap"))
    val INTMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("intMap"))
    val NESTEDMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("nestedMap"))
    val NESTEDMAP_C0_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map)
    val STRUCTMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("structMap"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(BLOBMAP_DESCRIPTOR)
        field(ENUMMAP_DESCRIPTOR)
        field(INTMAP_DESCRIPTOR)
        field(NESTEDMAP_DESCRIPTOR)
        field(STRUCTMAP_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                BLOBMAP_DESCRIPTOR.index -> builder.blobMap =
                    deserializer.deserializeMap(BLOBMAP_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, ByteArray>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 = if (nextHasValue()) { deserializeString().decodeBase64Bytes() } else { deserializeNull(); continue }
                            map0[k0] = v0
                        }
                        map0
                    }
                ENUMMAP_DESCRIPTOR.index -> builder.enumMap =
                    deserializer.deserializeMap(ENUMMAP_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, MyEnum>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 = if (nextHasValue()) { deserializeString().let { MyEnum.fromValue(it) } } else { deserializeNull(); continue }
                            map0[k0] = v0
                        }
                        map0
                    }
                INTMAP_DESCRIPTOR.index -> builder.intMap =
                    deserializer.deserializeMap(INTMAP_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, Int>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 = if (nextHasValue()) { deserializeInt() } else { deserializeNull(); continue }
                            map0[k0] = v0
                        }
                        map0
                    }
                NESTEDMAP_DESCRIPTOR.index -> builder.nestedMap =
                    deserializer.deserializeMap(NESTEDMAP_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, Map<String, Int>>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 =
                                if (nextHasValue()) {
                                    deserializer.deserializeMap(NESTEDMAP_C0_DESCRIPTOR) {
                                        val map1 = mutableMapOf<String, Int>()
                                        while (hasNextEntry()) {
                                            val k1 = key()
                                            val v1 = if (nextHasValue()) { deserializeInt() } else { deserializeNull(); continue }
                                            map1[k1] = v1
                                        }
                                        map1
                                    }
                                } else { deserializeNull(); continue }

                            map0[k0] = v0
                        }
                        map0
                    }
                STRUCTMAP_DESCRIPTOR.index -> builder.structMap =
                    deserializer.deserializeMap(STRUCTMAP_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, ReachableOnlyThroughMap>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 = if (nextHasValue()) { deserializeReachableOnlyThroughMapDocument(deserializer) } else { deserializeNull(); continue }
                            map0[k0] = v0
                        }
                        map0
                    }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
}

private suspend fun throwMapInputError(context: ExecutionContext, response: HttpResponse): kotlin.Nothing {
    val payload = response.body.readAll()
    val wrappedResponse = response.withPayload(payload)

    val errorDetails = try {
        RestJsonErrorDeserializer.deserialize(response.headers, payload)
    } catch (ex: Exception) {
        throw UnknownServiceErrorException("failed to parse response as restJson1 error", ex).also {
            setAseErrorMetadata(it, wrappedResponse, null)
        }
    }

    throw ExampleException(errorDetails.message)
}
