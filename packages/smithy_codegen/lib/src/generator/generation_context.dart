import 'package:code_builder/code_builder.dart';
import 'package:smithy_ast/smithy_ast.dart';
import 'package:smithy_codegen/src/generator/generator.dart';
import 'package:smithy_codegen/src/generator/protocol/protocol_traits.dart';
import 'package:smithy_codegen/src/util/shape_ext.dart';
import 'package:smithy_codegen/src/util/symbol_ext.dart';

/// Useful properties when generating structure shapes.
mixin StructureGenerationContext<U> on ShapeGenerator<StructureShape, U> {
  /// All members on [shape] which are generated.
  ///
  /// Can be overriden to limit the members to be code generated.
  Iterable<MemberShape> get members => shape.members.values;

  /// Members sorted by their re-cased Dart name.
  late final List<MemberShape> sortedMembers = members.toList()
    ..sort((a, b) {
      return a.dartName.compareTo(b.dartName);
    });

  /// Member shapes and their [Reference] types.
  late final Map<MemberShape, Reference> memberSymbols = {
    for (var member in sortedMembers)
      member: context
          .symbolFor(member.target, shape)
          .withBoxed(member.isNullable(shape)),
  };

  /// The symbol for the HTTP payload.
  late final Reference payloadSymbol = (httpInputTraits?.httpPayload.symbol ??
      httpOutputTraits?.httpPayload.symbol ??
      httpErrorTraits?.httpPayload.symbol)!;

  /// The symbol for the built class, to be generated by `built_value`.
  late final Reference builtSymbol =
      symbol.typeRef.rebuild((t) => t.symbol = '_\$$className');

  /// The symbol for the builder class, to be generated by `built_value`.
  late final Reference builderSymbol =
      symbol.typeRef.rebuild((t) => t.symbol = '${className}Builder');

  /// The symbol for the built payload class, to be generated by `built_value`.
  late final Reference builtPayloadSymbol =
      symbol.typeRef.rebuild((t) => t.symbol = '_\$${className}Payload');

  /// The symbol for the payload's builder class, to be generated by
  /// `built_value`.
  late final Reference payloadBuilderSymbol =
      symbol.typeRef.rebuild((t) => t.symbol = '${className}PayloadBuilder');

  /// The resolved HTTP input traits.
  late final HttpInputTraits? httpInputTraits = shape.httpInputTraits(context);

  /// The resolved HTTP output traits.
  late final HttpOutputTraits? httpOutputTraits =
      shape.httpOutputTraits(context);

  /// The resolved HTTP error traits.
  late final HttpErrorTraits? httpErrorTraits = shape.httpErrorTraits(context);

  /// The member shape to serialize when [HttpPayloadTrait] is used.
  late final MemberShape? payloadShape = httpInputTraits?.httpPayload.member ??
      httpOutputTraits?.httpPayload.member ??
      httpErrorTraits?.httpPayload.member;

  /// The list of all members which should not be serialized in the payload.
  late final List<MemberShape> nonSerializableMembers =
      shape.nonSerializableMembers(context);

  /// The list of all members which should be serialized in the payload.
  late final List<MemberShape> serializableMembers =
      shape.serializableMembers(context);

  /// Whether the structure has an HTTP payload.
  late final bool hasPayload = shape.hasPayload;

  /// Whether the structure needs a payload struct.
  late final bool hasBuiltPayload = shape.hasBuiltPayload(context);

  /// Whether the structure has a streaming payload.
  late final bool hasStreamingPayload = shape.hasStreamingPayload(context);
}

mixin OperationGenerationContext<U> on ShapeGenerator<OperationShape, U> {
  late final inputShape = shape.inputShape(context);
  late final inputSymbol = shape.inputSymbol(context);
  late final inputPayload = inputShape.httpPayload(context);
  late final outputShape = shape.outputShape(context);
  late final outputSymbol = shape.outputSymbol(context);
  late final outputPayload = outputShape.httpPayload(context);

  late final List<HttpErrorTraits> errorSymbols = [
    ...?context.service?.errors,
    ...shape.errors,
  ].whereType<ShapeRef>().map((error) {
    final shape = context.shapeFor(error.target) as StructureShape;
    return shape.httpErrorTraits(context)!;
  }).toList();

  late final httpTrait = shape.expectTrait<HttpTrait>();
  late final httpInputTraits = inputShape.httpInputTraits(context)!;
  late final httpOutputTraits = outputShape.httpOutputTraits(context)!;
}
