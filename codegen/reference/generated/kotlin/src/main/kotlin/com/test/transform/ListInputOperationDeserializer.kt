// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.sdk.kotlin.runtime.UnknownServiceErrorException
import aws.sdk.kotlin.runtime.http.setAseErrorMetadata
import aws.sdk.kotlin.runtime.http.withPayload
import aws.sdk.kotlin.runtime.protocol.json.RestJsonErrorDeserializer
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.isSuccess
import aws.smithy.kotlin.runtime.http.operation.HttpDeserialize
import aws.smithy.kotlin.runtime.http.readAll
import aws.smithy.kotlin.runtime.http.response.HttpResponse
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.util.decodeBase64Bytes
import com.test.model.ExampleException
import com.test.model.ListInputResponse
import com.test.model.MyEnum
import com.test.model.Nested


internal class ListInputOperationDeserializer: HttpDeserialize<ListInputResponse> {

    override suspend fun deserialize(context: ExecutionContext, response: HttpResponse): ListInputResponse {
        if (!response.status.isSuccess()) {
            throwListInputError(context, response)
        }
        val builder = ListInputResponse.Builder()

        val payload = response.body.readAll()
        if (payload != null) {
            deserializeListInputOperationBody(builder, payload)
        }
        return builder.build()
    }
}

private fun deserializeListInputOperationBody(builder: ListInputResponse.Builder, payload: ByteArray) {
    val deserializer = JsonDeserializer(payload)
    val BLOBLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("blobList"))
    val ENUMLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("enumList"))
    val INTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("intList"))
    val NESTEDINTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("nestedIntList"))
    val NESTEDINTLIST_C0_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List)
    val STRUCTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("structList"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(BLOBLIST_DESCRIPTOR)
        field(ENUMLIST_DESCRIPTOR)
        field(INTLIST_DESCRIPTOR)
        field(NESTEDINTLIST_DESCRIPTOR)
        field(STRUCTLIST_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                BLOBLIST_DESCRIPTOR.index -> builder.blobList =
                    deserializer.deserializeList(BLOBLIST_DESCRIPTOR) {
                        val col0 = mutableListOf<ByteArray>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().decodeBase64Bytes() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ENUMLIST_DESCRIPTOR.index -> builder.enumList =
                    deserializer.deserializeList(ENUMLIST_DESCRIPTOR) {
                        val col0 = mutableListOf<MyEnum>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().let { MyEnum.fromValue(it) } } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                INTLIST_DESCRIPTOR.index -> builder.intList =
                    deserializer.deserializeList(INTLIST_DESCRIPTOR) {
                        val col0 = mutableListOf<Int>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInt() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                NESTEDINTLIST_DESCRIPTOR.index -> builder.nestedIntList =
                    deserializer.deserializeList(NESTEDINTLIST_DESCRIPTOR) {
                        val col0 = mutableListOf<List<Int>>()
                        while (hasNextElement()) {
                            val el0 = deserializer.deserializeList(NESTEDINTLIST_C0_DESCRIPTOR) {
                                val col1 = mutableListOf<Int>()
                                while (hasNextElement()) {
                                    val el1 = if (nextHasValue()) { deserializeInt() } else { deserializeNull(); continue }
                                    col1.add(el1)
                                }
                                col1
                            }
                            col0.add(el0)
                        }
                        col0
                    }
                STRUCTLIST_DESCRIPTOR.index -> builder.structList =
                    deserializer.deserializeList(STRUCTLIST_DESCRIPTOR) {
                        val col0 = mutableListOf<Nested>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeNestedDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
}

private suspend fun throwListInputError(context: ExecutionContext, response: HttpResponse): kotlin.Nothing {
    val payload = response.body.readAll()
    val wrappedResponse = response.withPayload(payload)

    val errorDetails = try {
        RestJsonErrorDeserializer.deserialize(response.headers, payload)
    } catch (ex: Exception) {
        throw UnknownServiceErrorException("failed to parse response as restJson1 error", ex).also {
            setAseErrorMetadata(it, wrappedResponse, null)
        }
    }

    throw ExampleException(errorDetails.message)
}
