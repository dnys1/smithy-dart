// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.parameters
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.headers
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.http.util.encodeLabel
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.json.JsonSerializer
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import com.test.model.DuplicateInputTestRequest


internal class DuplicateInputTestOperationSerializer: HttpSerialize<DuplicateInputTestRequest> {
    override suspend fun serialize(context: ExecutionContext, input: DuplicateInputTestRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            val pathSegments = listOf(
                "smoketest-duplicate",
                "${input.label1}".encodeLabel(),
                "foo",
            )
            path = pathSegments.joinToString(separator = "/", prefix = "/")
            parameters {
                if (input.query1 != null) append("Query1", input.query1)
            }
        }

        builder.headers {
            if (input.header1?.isNotEmpty() == true) append("X-Header1", input.header1)
            if (input.header2?.isNotEmpty() == true) append("X-Header2", input.header2)
        }

        val payload = serializeDuplicateInputTestOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        builder.headers.setMissing("Content-Type", "application/json")
        return builder
    }
}

private fun serializeDuplicateInputTestOperationBody(context: ExecutionContext, input: DuplicateInputTestRequest): ByteArray {
    val serializer = JsonSerializer()
    val PAYLOAD1_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("payload1"))
    val PAYLOAD2_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, JsonSerialName("payload2"))
    val PAYLOAD3_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("payload3"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(PAYLOAD1_DESCRIPTOR)
        field(PAYLOAD2_DESCRIPTOR)
        field(PAYLOAD3_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.payload1?.let { field(PAYLOAD1_DESCRIPTOR, it) }
        input.payload2?.let { field(PAYLOAD2_DESCRIPTOR, it) }
        input.payload3?.let { field(PAYLOAD3_DESCRIPTOR, it, ::serializeNestedDocument) }
    }
    return serializer.toByteArray()
}
