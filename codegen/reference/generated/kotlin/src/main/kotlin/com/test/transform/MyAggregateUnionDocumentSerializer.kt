// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.time.TimestampFormat
import com.test.model.MyAggregateUnion


internal fun serializeMyAggregateUnionDocument(serializer: Serializer, input: MyAggregateUnion) {
    val I32_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, JsonSerialName("i32"))
    val INTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("intList"))
    val INTMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("intMap"))
    val NESTED3_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("nested3"))
    val TIMESTAMP4_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("timestamp4"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(I32_DESCRIPTOR)
        field(INTLIST_DESCRIPTOR)
        field(INTMAP_DESCRIPTOR)
        field(NESTED3_DESCRIPTOR)
        field(TIMESTAMP4_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        when (input) {
            is MyAggregateUnion.I32 -> field(I32_DESCRIPTOR, input.value)
            is MyAggregateUnion.IntList -> {
                listField(INTLIST_DESCRIPTOR) {
                    for (el0 in input.value) {
                        serializeInt(el0)
                    }
                }
            }
            is MyAggregateUnion.IntMap -> {
                mapField(INTMAP_DESCRIPTOR) {
                    input.value.forEach { (key, value) -> entry(key, value) }
                }
            }
            is MyAggregateUnion.Nested3 -> field(NESTED3_DESCRIPTOR, input.value, ::serializeNestedDocument)
            is MyAggregateUnion.Timestamp4 -> field(TIMESTAMP4_DESCRIPTOR, input.value, TimestampFormat.ISO_8601)
        }
    }
}
