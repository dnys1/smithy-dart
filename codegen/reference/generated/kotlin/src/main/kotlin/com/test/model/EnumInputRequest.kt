// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.model



class EnumInputRequest private constructor(builder: Builder) {
    val enumHeader: com.test.model.MyEnum? = builder.enumHeader
    val nestedWithEnum: com.test.model.NestedEnum? = builder.nestedWithEnum

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): com.test.model.EnumInputRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("EnumInputRequest(")
        append("enumHeader=$enumHeader,")
        append("nestedWithEnum=$nestedWithEnum)")
    }

    override fun hashCode(): kotlin.Int {
        var result = enumHeader?.hashCode() ?: 0
        result = 31 * result + (nestedWithEnum?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as EnumInputRequest

        if (enumHeader != other.enumHeader) return false
        if (nestedWithEnum != other.nestedWithEnum) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): com.test.model.EnumInputRequest = Builder(this).apply(block).build()

    class Builder {
        var enumHeader: com.test.model.MyEnum? = null
        var nestedWithEnum: com.test.model.NestedEnum? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: com.test.model.EnumInputRequest) : this() {
            this.enumHeader = x.enumHeader
            this.nestedWithEnum = x.nestedWithEnum
        }

        @PublishedApi
        internal fun build(): com.test.model.EnumInputRequest = EnumInputRequest(this)

        /**
         * construct an [com.test.model.NestedEnum] inside the given [block]
         */
        fun nestedWithEnum(block: com.test.model.NestedEnum.Builder.() -> kotlin.Unit) {
            this.nestedWithEnum = com.test.model.NestedEnum.invoke(block)
        }
    }
}
