// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.parameters
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.headers
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.http.util.encodeLabel
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.json.JsonSerializer
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.time.TimestampFormat
import com.test.model.TimestampInputRequest


internal class TimestampInputOperationSerializer: HttpSerialize<TimestampInputRequest> {
    override suspend fun serialize(context: ExecutionContext, input: TimestampInputRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            val pathSegments = listOf(
                "input",
                "timestamp",
                "${input.tsLabel?.format(TimestampFormat.ISO_8601)}".encodeLabel(),
            )
            path = pathSegments.joinToString(separator = "/", prefix = "/")
            parameters {
                if (input.queryTimestamp != null) append("qtime", input.queryTimestamp.format(TimestampFormat.ISO_8601))
                if (input.queryTimestampList?.isNotEmpty() == true) appendAll("qtimeList", input.queryTimestampList.map { it.format(TimestampFormat.ISO_8601) })
            }
        }

        builder.headers {
            if (input.headerEpoch != null) append("X-Epoch", input.headerEpoch.format(TimestampFormat.EPOCH_SECONDS))
            if (input.headerHttpDate != null) append("X-Date", input.headerHttpDate.format(TimestampFormat.RFC_5322))
        }

        val payload = serializeTimestampInputOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        builder.headers.setMissing("Content-Type", "application/json")
        return builder
    }
}

private fun serializeTimestampInputOperationBody(context: ExecutionContext, input: TimestampInputRequest): ByteArray {
    val serializer = JsonSerializer()
    val DATETIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("dateTime"))
    val EPOCHSECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("epochSeconds"))
    val HTTPDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("httpDate"))
    val NORMAL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("normal"))
    val TIMESTAMPLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("timestampList"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(DATETIME_DESCRIPTOR)
        field(EPOCHSECONDS_DESCRIPTOR)
        field(HTTPDATE_DESCRIPTOR)
        field(NORMAL_DESCRIPTOR)
        field(TIMESTAMPLIST_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.dateTime?.let { field(DATETIME_DESCRIPTOR, it, TimestampFormat.ISO_8601) }
        input.epochSeconds?.let { field(EPOCHSECONDS_DESCRIPTOR, it, TimestampFormat.EPOCH_SECONDS) }
        input.httpDate?.let { field(HTTPDATE_DESCRIPTOR, it, TimestampFormat.RFC_5322) }
        input.normal?.let { field(NORMAL_DESCRIPTOR, it, TimestampFormat.EPOCH_SECONDS) }
        if (input.timestampList != null) {
            listField(TIMESTAMPLIST_DESCRIPTOR) {
                for (el0 in input.timestampList) {
                    serializeInstant(el0, TimestampFormat.EPOCH_SECONDS)
                }
            }
        }
    }
    return serializer.toByteArray()
}
