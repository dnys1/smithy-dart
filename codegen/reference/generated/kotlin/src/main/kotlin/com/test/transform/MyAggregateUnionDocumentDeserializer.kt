// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.serde.DeserializationException
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.time.Instant
import com.test.model.MyAggregateUnion


internal fun deserializeMyAggregateUnionDocument(deserializer: Deserializer): MyAggregateUnion {
    var value: MyAggregateUnion? = null
    val I32_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, JsonSerialName("i32"))
    val INTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("intList"))
    val INTMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("intMap"))
    val NESTED3_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("nested3"))
    val TIMESTAMP4_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("timestamp4"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(I32_DESCRIPTOR)
        field(INTLIST_DESCRIPTOR)
        field(INTMAP_DESCRIPTOR)
        field(NESTED3_DESCRIPTOR)
        field(TIMESTAMP4_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while(true) {
            when(findNextFieldIndex()) {
                I32_DESCRIPTOR.index -> value = MyAggregateUnion.I32(deserializeInt())
                INTLIST_DESCRIPTOR.index -> value =
                    deserializer.deserializeList(INTLIST_DESCRIPTOR) {
                        val col0 = mutableListOf<Int>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInt() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        MyAggregateUnion.IntList(col0)
                    }
                INTMAP_DESCRIPTOR.index -> value =
                    deserializer.deserializeMap(INTMAP_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, Int>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 = if (nextHasValue()) { deserializeInt() } else { deserializeNull(); continue }
                            map0[k0] = v0
                        }
                        MyAggregateUnion.IntMap(map0)
                    }
                NESTED3_DESCRIPTOR.index -> value = MyAggregateUnion.Nested3(deserializeNestedDocument(deserializer))
                TIMESTAMP4_DESCRIPTOR.index -> value = MyAggregateUnion.Timestamp4(deserializeString().let { Instant.fromIso8601(it) })
                null -> break@loop
                else -> value = MyAggregateUnion.SdkUnknown.also { skipValue() }
            }
        }
    }
    return value ?: throw DeserializationException("Deserialized value unexpectedly null: MyAggregateUnion")
}
