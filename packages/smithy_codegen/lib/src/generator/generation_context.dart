import 'package:code_builder/code_builder.dart';
import 'package:smithy/smithy.dart';
import 'package:smithy_ast/smithy_ast.dart';
import 'package:smithy_codegen/src/generator/generator.dart';
import 'package:smithy_codegen/src/generator/protocol/protocol_traits.dart';
import 'package:smithy_codegen/src/util/shape_ext.dart';
import 'package:smithy_codegen/src/util/symbol_ext.dart';

/// Useful properties when generating structure shapes.
mixin StructureGenerationContext<U> on ShapeGenerator<StructureShape, U> {
  /// All members on [shape] which are generated.
  ///
  /// Can be overriden to limit the members to be code generated.
  Iterable<MemberShape> get members => shape.members.values;

  /// Members sorted by their re-cased Dart name.
  late final List<MemberShape> sortedMembers = members.toList()
    ..sort((a, b) {
      return a.dartName.compareTo(b.dartName);
    });

  /// Member shapes and their [Reference] types.
  late final Map<MemberShape, Reference> memberSymbols = {
    for (var member in sortedMembers)
      member: context
          .symbolFor(member.target, shape)
          .withBoxed(member.isNullable(shape)),
  };

  /// The symbol for the built class, to be generated by `built_value`.
  late final Reference builtSymbol =
      symbol.typeRef.rebuild((t) => t.symbol = '_\$$className');

  /// The symbol for the builder class, to be generated by `built_value`.
  late final Reference builderSymbol =
      symbol.typeRef.rebuild((t) => t.symbol = '${className}Builder');

  /// The resolved HTTP input traits.
  late final HttpInputTraits httpInputTraits = shape.httpInputTraits(context);
}

mixin OperationGenerationContext<U> on ShapeGenerator<OperationShape, U> {
  late final inputShape = shape.inputShape(context);
  late final inputSymbol = shape.inputSymbol(context);
  late final inputPayload = inputShape.httpPayload(context);
  late final outputShape = shape.outputShape(context);
  late final outputSymbol = shape.outputSymbol(context);

  late final Map<SmithyError, Reference> errorSymbols = Map.fromEntries([
    ...?context.service?.errors,
    ...shape.errors,
  ].map((error) {
    final symbol = context.symbolFor(error.target);
    final shape = context.shapeFor(error.target);
    return MapEntry(shape.smithyError, symbol);
  }));

  late final httpTrait = shape.expectTrait<HttpTrait>();
  late final httpInputTraits = inputShape.httpInputTraits(context);
  late final httpOutputTraits = outputShape.httpOutputTraits(context);
}
