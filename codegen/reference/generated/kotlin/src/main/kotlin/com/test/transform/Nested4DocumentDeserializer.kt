// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package com.test.transform

import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import com.test.model.Nested4


internal fun deserializeNested4Document(deserializer: Deserializer): Nested4 {
    val builder = Nested4.Builder()
    val INTLIST_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("intList"))
    val INTMAP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("intMap"))
    val MEMBER1_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, JsonSerialName("member1"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(INTLIST_DESCRIPTOR)
        field(INTMAP_DESCRIPTOR)
        field(MEMBER1_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                INTLIST_DESCRIPTOR.index -> builder.intList =
                    deserializer.deserializeList(INTLIST_DESCRIPTOR) {
                        val col0 = mutableListOf<Int>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInt() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                INTMAP_DESCRIPTOR.index -> builder.intMap =
                    deserializer.deserializeMap(INTMAP_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, Int>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 = if (nextHasValue()) { deserializeInt() } else { deserializeNull(); continue }
                            map0[k0] = v0
                        }
                        map0
                    }
                MEMBER1_DESCRIPTOR.index -> builder.member1 = deserializeInt()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
